from googleapiclient.discovery import build
import pandas as pd
import seaborn as snsapi_key='AIzaSyCHwKmF83lmFVBCUOL49Vmsvu4pYwBk6t8'
# channel_id='UCBJycsmduvYEL83R_U4JriQ'
channel_ids=['UCBJycsmduvYEL83R_U4JriQ' , 'UCOhHO2ICt0ti9KAh-QHvttQ', 'UCXUJJNoP1QupwsYIWFXmsZg' ]

youtube = build ('youtube' , 'v3' , developerKey=api_key)def get_channel_stats(youtube, channel_ids): 
    all_data = []
    request = youtube.channels().list(part='snippet,contentDetails,statistics', id=','.join(channel_ids))
    response = request.execute() 
    for i in range(len(response['items'])):
        data = dict(Channel_name=response['items'][i]['snippet']['title'],
                    Subscribers=response['items'][i]['statistics']['subscriberCount'], 
                    Views=response['items'][i]['statistics']['viewCount'],
                    Total_videos=response['items'][i]['statistics']['videoCount'],
                    playlist_id=response['items'][i]['contentDetails']['relatedPlaylists']['uploads'])
        all_data.append(data)        
    return all_data
channel_statistics=get_channel_stats(youtube, channel_ids)channel_data=pd.DataFrame(channel_statistics)channel_data['Subscribers']=pd.to_numeric(channel_data['Subscribers'])
channel_data['Views']=pd.to_numeric(channel_data['Views'])
channel_data['Total_videos']=pd.to_numeric(channel_data['Total_videos'])sns.set(rc={'figure.figsize':(5,4)})
ax = sns.barplot(x='Channel_name', y='Subscribers', data=channel_data) ax = sns.barplot(x='Channel_name', y='Views', data=channel_data) ax = sns.barplot(x='Channel_name', y='Total_videos', data=channel_data) playlist_id = channel_data.loc[channel_data['Channel_name'] == 'Marques Brownlee', 'playlist_id'].iloc[0]def get_video_ids(youtube, playlist_id): 
    request = youtube.playlistItems().list(part='contentDetails', playlistId=playlist_id , maxResults=50) 
    response = request.execute() 
    video_ids = []
    for i in range(len(response['items'])):
        video_ids.append(response['items'][i]['contentDetails']['videoId'])
    
    next_page_token = response.get('nextPageToken')
    more_pages = True
    
    while more_pages:
        if next_page_token is None:
            more_pages = False
        else:
            request = youtube.playlistItems().list(
                part='contentDetails',
                playlistId=playlist_id,
                maxResults=50,
                pageToken=next_page_token
            )
            response = request.execute()
    
            for i in range(len(response['items'])):
                video_ids.append(response['items'][i]['contentDetails']['videoId'])
            
            next_page_token = response.get('nextPageToken')
    
    return video_ids
video_ids=get_video_ids(youtube, playlist_id)def get_video_stats(youtube, video_ids):
    all_video_stats = []

    for i in range(0, len(video_ids), 50):
        request = youtube.videos().list(
            part='snippet,statistics',
            id=','.join(video_ids[i:i+50])
        )
        response = request.execute()

        for video in response['items']:
            video_stats = {
                'Title': video['snippet']['title'],
                'Published_date': video['snippet']['publishedAt'],
                'Views': video['statistics'].get('viewCount', 0),
                'Likes': video['statistics'].get('likeCount', 0),
                'Dislikes': video['statistics'].get('dislikeCount', 0),
                'Comments': video['statistics'].get('commentCount', 0)
            }
            all_video_stats.append(video_stats)

    return all_video_stats
video_details=get_video_stats(youtube, video_ids)video_data=pd.DataFrame(video_details)video_data['Published_date'] = pd.to_datetime(video_data['Published_date']).dt.date
video_data['Views'] = pd.to_numeric(video_data['Views'])
video_data['Likes'] = pd.to_numeric(video_data['Likes'])
video_data['Dislikes'] = pd.to_numeric(video_data['Dislikes'])
video_data['Comments'] = pd.to_numeric(video_data['Comments'])

video_data
top10_videos=video_data.sort_values(by='Views' , ascending=False).head(10)ax1=sns.barplot(x='Views' , y='Title', data=top10_videos)video_data['Month']=pd.to_datetime(video_data['Published_date']).dt.strftime('%b')videos_per_month=video_data.groupby('Month', as_index=False).size()sort_order=['Jan' ,'Feb' ,'Mar' ,'Apr' ,'May' ,'Jun' ,'Jul' ,'Aug' ,'Sep' ,'Oct' ,'Nov' ,'Dec']videos_per_month.index=pd.CategoricalIndex(videos_per_month['Month'] , categories=sort_order , ordered=True) ax2=sns.barplot(x='Month' , y='size', data=videos_per_month)import os
folder_path = r'D:\College\Notebooks'
# Define the full path for the CSV file
file_path = os.path.join(folder_path, 'MKBHD_videos_data.csv')
video_data.to_csv(file_path, index=False)
video_data.to_csv('MKBHD videos_data.csv')